package controller;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.MemberVO;
import domain.PagingVO;
import handler.PagingHandler;
import net.coobird.thumbnailator.Thumbnails;
import service.BoardService;
import service.BoardServiceImpl;

@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
	private BoardService bsv;
	private RequestDispatcher rdp;
	private String destPage;
	private int isOk;
	private String savePath;  //파일경로를 저장할 변수
	private final String UTF8 = "utf-8"; //인코딩 설정시 필요함 
       
    public BoardController() {
        bsv = new BoardServiceImpl(); 
    }

	protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		req.setCharacterEncoding("utf-8");
		res.setCharacterEncoding("utf-8");
		res.setContentType("text/html; charset=UTF-8");
		
		String uri = req.getRequestURI();
		String path = uri.substring(uri.lastIndexOf("/")+1);
		
		switch(path) {
		case "register":
			destPage = "/board/register.jsp";
			break;
		case "insert":
			try {
				//파일을 업로드할 물리적인 경로 설정 (업로드 할때 설정)
				savePath = getServletContext().getRealPath("/_fileUpload");
				File fileDir = new File(savePath);
				log.info("저장위치"+savePath);
				
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir); //저장할 위치를 file 객체로 지정
				fileItemFactory.setSizeThreshold(2*1024*1024); // 저장을 위한 임시 메모리 저장 용량 설정 : byte 단위
				
				BoardVO bvo = new BoardVO();
				// multipart/form-data 형식으로 넘어온 request 객체를 다루기 쉽게 변환해주는 역할
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				
				List<FileItem> itemList = fileUpload.parseRequest(req);
				for(FileItem item : itemList) {
					switch(item.getFieldName()) {
					case "title":
						bvo.setTitle(item.getString(UTF8)); //인코딩 형식을 담아서 변환
						break;
					case "writer":
						bvo.setWriter(item.getString(UTF8));
						break;
					case "content":
						bvo.setContent(item.getString(UTF8));
						break;
					case "image_file":
						//이미지가 있는지 없는 체크
						if(item.getSize() > 0) { // 데이터의 크기를 바이트 단위로 리턴
 							String fileName = item.getName() // 경로를 포함한 파일이름  ~~~~/dog.jsp
 									.substring(item.getName().lastIndexOf("/")+1); //파일 이름만 분리
 							// 시스템의 현재 시간_dog.jsp
 							fileName = System.currentTimeMillis()+"_"+fileName; 
 							File UploadFilePath = new File(fileDir+File.separator+fileName);
 							log.info("파일경로+이름 : "+UploadFilePath);
 							
 							//저장
 							try {
								item.write(UploadFilePath); //자바 객체를 디스크에 쓰기
								bvo.setImage_file(fileName);
								
								//썸내일 작업 : 리스트 페이지에서 트래픽 과다사용 방지
								Thumbnails.of(UploadFilePath)
								.size(75, 75)
								.toFile(new File(fileDir+File.separator+"th_"+fileName));
								
							} catch (Exception e) {
								log.info(">>> file writer on disk fail");
								e.printStackTrace();
							}
						}
						
						break;
					}
				}
				isOk = bsv.register(bvo);
				log.info(">>> insert > "+(isOk >0? "OK":"Fail"));
				destPage="pageList";
//				String title = req.getParameter("title");
//				String writer = req.getParameter("writer");
//				String content = req.getParameter("content");
//				BoardVO bvo = new BoardVO(title, writer, content);
//				isOk = bsv.register(bvo);
//				destPage="pageList";
						
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "list":
			try {
				HttpSession ses = req.getSession();
				MemberVO mvo = (MemberVO)ses.getAttribute("ses");
				String email = mvo.getEmail();
				List<BoardVO> list = bsv.getMyList(email);
				req.setAttribute("list", list);
				
				destPage = "/board/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "pageList":
			try {
				PagingVO pgvo = new PagingVO();
				int totCount = bsv.getPageCnt(); //전체 카운트 호출
				List<BoardVO> list = bsv.getListPage(pgvo); // limit이용한 한페이지 리스트 호출
				PagingHandler ph = new PagingHandler(pgvo, totCount);
				req.setAttribute("list", list); // 한페이지에 나와야 하는 리스트 보내기
				req.setAttribute("pgh", ph);  //페이지 정보 보내기
				log.info("pageList 성공");
				destPage = "/board/list.jsp";
			} catch (Exception e) {
				log.info("paging error");
				e.printStackTrace();
			}
			break;
			
		case "page":
			try {
				int pageNo = Integer.parseInt(req.getParameter("pageNo"));
				int qty = Integer.parseInt(req.getParameter("qty"));
				
				PagingVO pgvo = new PagingVO(pageNo, qty);
				
				int totCount = bsv.getPageCnt(); //전체 카운트 호출
				List<BoardVO> list = bsv.getListPage(pgvo); // limit이용한 한페이지 리스트 호출
				PagingHandler ph = new PagingHandler(pgvo, totCount);
				req.setAttribute("list", list); // 한페이지에 나와야 하는 리스트 보내기
				req.setAttribute("pgh", ph);  //페이지 정보 보내기
				destPage = "/board/list.jsp";
			} catch (Exception e) {
				log.info("subPage error");
				e.printStackTrace();
			}
			break;
			
		case "detail":
			try {
				int bno = Integer.parseInt(req.getParameter("bno"));
				//service에게 호출시 read_count +1(update)하고, 디테일 값을 호출
				
				BoardVO bvo = bsv.getDetail(bno);
				req.setAttribute("bvo", bvo);
				log.info("detail page 성공");
				destPage = "/board/detail.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "modify":
			try {
				int bno = Integer.parseInt(req.getParameter("bno"));
				BoardVO bvo = bsv.getDetail(bno);
				req.setAttribute("bvo", bvo);
				log.info("modify page 성공");
				destPage = "/board/modify.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "update":
			try {
				savePath = getServletContext().getRealPath("/_fileUpload");
				File fileDir = new File(savePath);
				
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir);
				fileItemFactory.setSizeThreshold(2*1024*1024);
				
				BoardVO bvo = new BoardVO();
				
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				log.info(">> update 준비 >>");
				
				List<FileItem> itemList = fileUpload.parseRequest(req);
				
				String old_file = null;
				for(FileItem item: itemList) {
					switch(item.getFieldName()) {
					case "bno":
						bvo.setBno(Integer.parseInt(item.getString(UTF8)));
						break;
					case "title":
						bvo.setTitle(item.getString(UTF8));
						break;
					case "content":
						bvo.setContent(item.getString(UTF8));
						break;
					case "image_file":
						//old_file
						
						break;
					case "new_file":
						break;
							
					}
				}
				
				
				
				
				
				
				
				
				
//				int bno = Integer.parseInt(req.getParameter("bno"));
//				String title = req.getParameter("title");
//				String content = req.getParameter("content");
//				BoardVO bvo = new BoardVO(bno, title, content);
//				isOk = bsv.modify(bvo);
				
				destPage = "pageList";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "remove":
			try {
				int bno = Integer.parseInt(req.getParameter("bno"));
				isOk = bsv.remove(bno);
				destPage = "pageList";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		}
		rdp = req.getRequestDispatcher(destPage);
		rdp.forward(req, res);
	
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
