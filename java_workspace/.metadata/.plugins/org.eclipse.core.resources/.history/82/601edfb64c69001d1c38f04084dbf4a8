package test;

public class Singleton {

		// 싱글톤 패턴 : 소프트웨어 디자인 패턴 중 하나
		// 객체를 공유하고자 할 때 사용
		
		//단 1개만 존재해야 하는 객체의 인스턴스, static으로 선언
		private static Singleton instance;
		private int count;
		//생성자를 이용하여 객체 생성을 막기위한 private 설정 
		private Singleton() {}
		
		//getInstance를 사용한 instance 반환
		public static Singleton getInstance() {
			//null 일 때만 생성, 이미 생성되어 있다면 기존 instance 반환
			if(instance == null) {
				instance = new Singleton();
			}
			return instance;
		
		}
		public void counter() {
			count++;
			System.out.println(count);
		}
		
		public static void main(String[] args) {
			Singleton s = getInstance();
			s.counter();
			Singleton s1 = getInstance();
			s1.counter();
			
		}

}
